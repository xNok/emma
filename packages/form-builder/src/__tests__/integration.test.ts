/**
 * Integration Test: Form Builder & Renderer Alignment
 *
 * This test ensures that bundles generated by the form-builder
 * are compatible with the form-renderer runtime.
 */

import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { FormBuilder } from '../form-builder.js';
import { EmmaConfig } from '../config.js';
import fs from 'fs-extra';
import path from 'path';
import type { FormSchema } from '@emma/shared/types';

const TEST_WORKSPACE = path.join(process.cwd(), '.test-workspace');
const TEST_FORM_ID = 'integration-test-form';

describe('Form Builder & Renderer Integration', () => {
  let config: EmmaConfig;
  let builder: FormBuilder;

  const testSchema = {
    formId: TEST_FORM_ID,
    name: 'Integration Test Form',
    version: '0.1.0',
    apiEndpoint: `http://localhost:3000/api/submit/${TEST_FORM_ID}`,
    theme: 'default',
    fields: [
      {
        id: 'name',
        type: 'text',
        label: 'Name',
        required: true,
        placeholder: 'Your name',
      },
      {
        id: 'email',
        type: 'email',
        label: 'Email',
        required: true,
        placeholder: 'your@email.com',
        validation: {
          pattern: 'email',
        },
      },
    ],
    settings: {
      submitButtonText: 'Submit Test',
      successMessage: 'Test form submitted successfully!',
      errorMessage: 'Test form submission failed.',
      honeypot: {
        enabled: true,
        fieldName: 'website',
      },
    },
  } as FormSchema;

  beforeAll(async () => {
    // Create test workspace
    await fs.ensureDir(TEST_WORKSPACE);

    // Construct EmmaConfig with the test workspace as the config dir so
    // paths (forms/builds) resolve under the test workspace used by tests.
    config = new EmmaConfig(TEST_WORKSPACE);
    builder = new FormBuilder(config);

    // Ensure renderer is built
    const rendererDist = path.resolve(
      process.cwd(),
      '../form-renderer/dist/emma-forms.esm.js'
    );
    if (!(await fs.pathExists(rendererDist))) {
      throw new Error(
        'Form renderer not built. Run: yarn workspace @emma/form-renderer build'
      );
    }
  });

  afterAll(async () => {
    // Clean up test workspace
    await fs.remove(TEST_WORKSPACE);
  });

  it('should generate a valid ESM bundle', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);

    expect(result).toBeDefined();
    expect(result.bundlePath).toContain(`${TEST_FORM_ID}.js`);
    expect(await fs.pathExists(result.bundlePath)).toBe(true);
  });

  it('should include the runtime module in output', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const runtimePath = path.join(result.outputDir, 'emma-forms.esm.js');

    expect(await fs.pathExists(runtimePath)).toBe(true);
  });

  it('should generate bundle with correct ESM import', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const bundleContent = await fs.readFile(result.bundlePath, 'utf8');

    // Validate ESM import statement
    expect(bundleContent).toContain(
      "import FormRenderer from './emma-forms.esm.js'"
    );

    // Validate it's not using old IIFE pattern
    expect(bundleContent).not.toContain('window.EmmaForms');
    expect(bundleContent).not.toContain('window.EmmaForm');
  });

  it('should embed the form schema correctly', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const bundleContent = await fs.readFile(result.bundlePath, 'utf8');

    // Schema should be embedded
    expect(bundleContent).toContain('const FORM_SCHEMA =');
    expect(bundleContent).toContain(testSchema.formId);
    expect(bundleContent).toContain(testSchema.name);
  });

  it('should include auto-initialization code', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const bundleContent = await fs.readFile(result.bundlePath, 'utf8');

    // Auto-init pattern
    expect(bundleContent).toContain('[data-emma-form=');
    expect(bundleContent).toContain('DOMContentLoaded');
    expect(bundleContent).toContain('new FormRenderer({');
  });

  it('should export schema and renderer for manual init', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const bundleContent = await fs.readFile(result.bundlePath, 'utf8');

    // ES exports for manual initialization
    expect(bundleContent).toContain('export { FORM_SCHEMA, FormRenderer }');
    expect(bundleContent).toContain('export default');
  });

  it('should generate a preview HTML file', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const previewPath = path.join(result.outputDir, 'preview.html');

    expect(await fs.pathExists(previewPath)).toBe(true);

    const previewContent = await fs.readFile(previewPath, 'utf8');

    // Should use type="module"
    expect(previewContent).toContain('type="module"');
    expect(previewContent).toContain(`${TEST_FORM_ID}.js`);

    // Should have data attribute for container
    expect(previewContent).toContain(`data-emma-form="${TEST_FORM_ID}"`);
  });

  it('should generate a landing page HTML file', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const landingPagePath = path.join(result.outputDir, 'index.html');

    expect(await fs.pathExists(landingPagePath)).toBe(true);

    const landingPageContent = await fs.readFile(landingPagePath, 'utf8');

    // Should contain the footer
    expect(landingPageContent).toContain('Built by Emma');
    expect(landingPageContent).toContain('https://github.com/xnok/emma');
  });

  it('should follow the bundle specification', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const bundleContent = await fs.readFile(result.bundlePath, 'utf8');

    // Per spec: Must have these key components
    const requiredPatterns = [
      // Import statement
      /import FormRenderer from ['"]\.\/emma-forms\.esm\.js['"]/,

      // Schema constant
      /const FORM_SCHEMA\s*=/,

      // Init function
      /function init\(\)/,

      // querySelector for data attribute
      /querySelectorAll\(\s*['"][^'"]*data-emma-form/,

      // FormRenderer instantiation
      /new FormRenderer\(\{/,

      // DOMContentLoaded listener
      /addEventListener\(['"]DOMContentLoaded['"]/,

      // ES exports
      /export\s+\{.*FORM_SCHEMA.*FormRenderer.*\}/,
      /export\s+default/,
    ];

    for (const pattern of requiredPatterns) {
      expect(bundleContent).toMatch(pattern);
    }
  });

  it('should replace all template placeholders', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const bundleContent = await fs.readFile(result.bundlePath, 'utf8');

    // No template placeholders should remain
    expect(bundleContent).not.toContain('__FORM_ID__');
    expect(bundleContent).not.toContain('__FORM_SCHEMA__');

    // Form ID should be present in actual usage
    expect(bundleContent).toContain(TEST_FORM_ID);
  });

  it('should handle theme assets', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);
    const themePath = path.join(
      result.outputDir,
      'themes',
      `${testSchema.theme}.css`
    );

    // Theme should be copied if it exists
    // Note: This test assumes theme files exist in form-renderer
    const themeExists = await fs.pathExists(themePath);

    // If theme doesn't exist, that's okay for this test
    // But if output dir exists, themes dir should exist
    const themesDir = path.join(result.outputDir, 'themes');
    if (themeExists) {
      expect(await fs.pathExists(themesDir)).toBe(true);
    }
  });

  it('should produce a valid bundle size', async () => {
    const result = await builder.build(TEST_FORM_ID, testSchema);

    // Bundle should not be empty
    expect(result.size).toBeGreaterThan(0);

    // Bundle should be reasonably sized (< 50KB for a simple form)
    expect(result.size).toBeLessThan(50 * 1024);
  });
});
